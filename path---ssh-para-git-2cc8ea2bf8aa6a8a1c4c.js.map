{"version":3,"sources":["webpack:///path---ssh-para-git-2cc8ea2bf8aa6a8a1c4c.js","webpack:///./.cache/json/ssh-para-git.json"],"names":["webpackJsonp","516","module","exports","data","site","siteMetadata","title","author","markdownRemark","id","html","frontmatter","date","pathContext","slug","previous","fields","next"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,cAAAC,OAAA,6BAA2DC,gBAAmBC,GAAA,yGAAAC,KAAA,quHAA0oHC,aAA+QL,MAAA,0CAAAM,KAAA,oBAA4EC,aAAgBC,KAAA,iBAAAC,UAAoCC,QAAUF,KAAA,iBAAuBH,aAAgBL,MAAA,eAAsBW,MAASD,QAAUF,KAAA,kBAAwBH,aAAgBL,MAAA","file":"path---ssh-para-git-2cc8ea2bf8aa6a8a1c4c.js","sourcesContent":["webpackJsonp([178121054625653],{\n\n/***/ 516:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"My Code bad\",\"author\":\"Guillermo Paredes Torrez\"}},\"markdownRemark\":{\"id\":\"/home/gd/Development/MyCodeBad/blog/src/pages/ssh-para-git/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>En este post veremos como configurar nuestro equipo de desarrollo con llaves SSH para GITHUB y GITLAB. Esto puede ser aplicado a BITBUCKET entre otros.\\nEstos pasos fueron ejecutados en el sistema operativo Debian 9.</p>\\n<p>Definición\\nSSH o Secure Shell, es un protocolo de administración remota que permite a los usuarios controlar y modificar sus servidores remotos a través de Internet. El servicio se creó como un reemplazo seguro para el Telnet sin cifrar y utiliza técnicas criptográficas para garantizar que todas las comunicaciones hacia y desde el servidor remoto sucedan de manera encriptada. Proporciona un mecanismo para autenticar un usuario remoto, transferir entradas desde el cliente al host y retransmitir la salida de vuelta al cliente.\\nPuedes ver mas en este <a href=\\\"https://www.hostinger.es/tutoriales/que-es-ssh\\\">enlace</a>.</p>\\n<h3>Paso 1.</h3>\\n<p>En nuestra terminal escribimos el siguiente comando, con el correo que usamos en github.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ssh\\\"><code class=\\\"language-ssh\\\">  $ ssh-keygen -t rsa -C &quot;nombre_correo@dominio.extension&quot;</code></pre>\\n      </div>\\n<h3>Paso 2.</h3>\\n<p>Nos retornara el siguiente mensaje.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ssh\\\"><code class=\\\"language-ssh\\\">$Generating public/private rsa key pair.\\nEnter file in which to save the key (/home/user_name/.ssh/id_rsa):</code></pre>\\n      </div>\\n<p>Este punto puedes ponerle un nombre para identificar la llave, en mi caso pondre “github<em>me” y le damos enter. `github</em>me`</p>\\n<p>Luego pondremos una contraseña para la llave ssh que estamos creando. Ahora repetimos los mismos pasos: 1 y 2, pero para gitlab.</p>\\n<h3>Paso 3.</h3>\\n<p>En nuestra terminal ejecutamos el siguiente comando.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ssh\\\"><code class=\\\"language-ssh\\\">ls -la ~/.ssh\\nbitbucket_me      config              github_me      known_hosts\\nbitbucket_me.pub  environment-chigui  github_me.pub</code></pre>\\n      </div>\\n<h3>Paso 4.</h3>\\n<p>Ahora nos ubicaremos en la carpeta “.ssh”, desde la terminal y creamos un archivo llamado “config”.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ssh\\\"><code class=\\\"language-ssh\\\">cd ~/.ssh\\ntouch config\\nvim config</code></pre>\\n      </div>\\n<p>Y dentro del archivo ponemos lo siguiente:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token comment\\\"># Personal account</span>\\nHost github.com\\nHostName github.com\\nPreferredAuthentications publickey\\nIdentityFile ~/.ssh/github_me\\n\\n<span class=\\\"token comment\\\"># Gitlab account</span>\\nHost gitlab.com\\nHostName gitlab.com\\nPreferredAuthentications publickey\\nIdentityFile ~/.ssh/gitlab_me</code></pre>\\n      </div>\\n<h3>Paso 5</h3>\\n<p>Agregamos nuestras llaves que creamos, con el siguiente comando.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ssh\\\"><code class=\\\"language-ssh\\\">ssh-add ~/.ssh/github_me\\nssh-add ~/.ssh/gitlab_me</code></pre>\\n      </div>\\n<p>Una vez generado nuestras llaves, tenemos que agregar dichas llaves ssh, a GITHUB y GITLAB, propiamente dichos.</p>\\n<h3>Paso 6</h3>\\n<p>Una vez ya agregada nuestras “ssh” generados a GITHUB y GITLAB, probamos la conectividad, con el siguiente comando.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ssh\\\"><code class=\\\"language-ssh\\\">ssh -T git@github.com\\n\\nEnter passphrase for key &#39;/home/gd/.ssh/github_me&#39;:\\nHi GuillermoParedes! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code></pre>\\n      </div>\\n<p>Realizando el test de conectividad con las llaves generadas.\\nY listo, ya tenemos configurado nuestras llaves ssh en nuestro equipo de desarrollo.</p>\",\"frontmatter\":{\"title\":\"Ssh para Github, Gitlab, Bitbucket, etc\",\"date\":\"March 30, 2018\"}}},\"pathContext\":{\"slug\":\"/ssh-para-git/\",\"previous\":{\"fields\":{\"slug\":\"/hello-world/\"},\"frontmatter\":{\"title\":\"Hola Mundo\"}},\"next\":{\"fields\":{\"slug\":\"/ReactBolivia/\"},\"frontmatter\":{\"title\":\"React Bolivia\"}}}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---ssh-para-git-2cc8ea2bf8aa6a8a1c4c.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"My Code bad\",\"author\":\"Guillermo Paredes Torrez\"}},\"markdownRemark\":{\"id\":\"/home/gd/Development/MyCodeBad/blog/src/pages/ssh-para-git/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>En este post veremos como configurar nuestro equipo de desarrollo con llaves SSH para GITHUB y GITLAB. Esto puede ser aplicado a BITBUCKET entre otros.\\nEstos pasos fueron ejecutados en el sistema operativo Debian 9.</p>\\n<p>Definición\\nSSH o Secure Shell, es un protocolo de administración remota que permite a los usuarios controlar y modificar sus servidores remotos a través de Internet. El servicio se creó como un reemplazo seguro para el Telnet sin cifrar y utiliza técnicas criptográficas para garantizar que todas las comunicaciones hacia y desde el servidor remoto sucedan de manera encriptada. Proporciona un mecanismo para autenticar un usuario remoto, transferir entradas desde el cliente al host y retransmitir la salida de vuelta al cliente.\\nPuedes ver mas en este <a href=\\\"https://www.hostinger.es/tutoriales/que-es-ssh\\\">enlace</a>.</p>\\n<h3>Paso 1.</h3>\\n<p>En nuestra terminal escribimos el siguiente comando, con el correo que usamos en github.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ssh\\\"><code class=\\\"language-ssh\\\">  $ ssh-keygen -t rsa -C &quot;nombre_correo@dominio.extension&quot;</code></pre>\\n      </div>\\n<h3>Paso 2.</h3>\\n<p>Nos retornara el siguiente mensaje.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ssh\\\"><code class=\\\"language-ssh\\\">$Generating public/private rsa key pair.\\nEnter file in which to save the key (/home/user_name/.ssh/id_rsa):</code></pre>\\n      </div>\\n<p>Este punto puedes ponerle un nombre para identificar la llave, en mi caso pondre “github<em>me” y le damos enter. `github</em>me`</p>\\n<p>Luego pondremos una contraseña para la llave ssh que estamos creando. Ahora repetimos los mismos pasos: 1 y 2, pero para gitlab.</p>\\n<h3>Paso 3.</h3>\\n<p>En nuestra terminal ejecutamos el siguiente comando.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ssh\\\"><code class=\\\"language-ssh\\\">ls -la ~/.ssh\\nbitbucket_me      config              github_me      known_hosts\\nbitbucket_me.pub  environment-chigui  github_me.pub</code></pre>\\n      </div>\\n<h3>Paso 4.</h3>\\n<p>Ahora nos ubicaremos en la carpeta “.ssh”, desde la terminal y creamos un archivo llamado “config”.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ssh\\\"><code class=\\\"language-ssh\\\">cd ~/.ssh\\ntouch config\\nvim config</code></pre>\\n      </div>\\n<p>Y dentro del archivo ponemos lo siguiente:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token comment\\\"># Personal account</span>\\nHost github.com\\nHostName github.com\\nPreferredAuthentications publickey\\nIdentityFile ~/.ssh/github_me\\n\\n<span class=\\\"token comment\\\"># Gitlab account</span>\\nHost gitlab.com\\nHostName gitlab.com\\nPreferredAuthentications publickey\\nIdentityFile ~/.ssh/gitlab_me</code></pre>\\n      </div>\\n<h3>Paso 5</h3>\\n<p>Agregamos nuestras llaves que creamos, con el siguiente comando.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ssh\\\"><code class=\\\"language-ssh\\\">ssh-add ~/.ssh/github_me\\nssh-add ~/.ssh/gitlab_me</code></pre>\\n      </div>\\n<p>Una vez generado nuestras llaves, tenemos que agregar dichas llaves ssh, a GITHUB y GITLAB, propiamente dichos.</p>\\n<h3>Paso 6</h3>\\n<p>Una vez ya agregada nuestras “ssh” generados a GITHUB y GITLAB, probamos la conectividad, con el siguiente comando.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ssh\\\"><code class=\\\"language-ssh\\\">ssh -T git@github.com\\n\\nEnter passphrase for key &#39;/home/gd/.ssh/github_me&#39;:\\nHi GuillermoParedes! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code></pre>\\n      </div>\\n<p>Realizando el test de conectividad con las llaves generadas.\\nY listo, ya tenemos configurado nuestras llaves ssh en nuestro equipo de desarrollo.</p>\",\"frontmatter\":{\"title\":\"Ssh para Github, Gitlab, Bitbucket, etc\",\"date\":\"March 30, 2018\"}}},\"pathContext\":{\"slug\":\"/ssh-para-git/\",\"previous\":{\"fields\":{\"slug\":\"/hello-world/\"},\"frontmatter\":{\"title\":\"Hola Mundo\"}},\"next\":{\"fields\":{\"slug\":\"/ReactBolivia/\"},\"frontmatter\":{\"title\":\"React Bolivia\"}}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/ssh-para-git.json\n// module id = 516\n// module chunks = 178121054625653"],"sourceRoot":""}